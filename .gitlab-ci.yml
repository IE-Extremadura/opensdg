variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  # MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  # MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
  DATA_SRC_PATH: "opensdg-datos/src"
  WEB_SRC_PATH: "opensdg-web/src"
  DATA_FOLDER_NAME: "opensdg-datos"
  WEB_FOLDER_NAME: "web"
  DATA_TAR_FILE: "opensdg-datos.tar.gz"
  WEB_TAR_FILE: "opensdg.tar.gz"

image: ruby:2.4

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths: # FIXME a√±adir la cache apropiada para ruby y los comandos gem y bundle
    - $WEB_SRC_PATH/.sass-cache
    - $DATA_SRC_PATH/__pycache__

stages:
  - build-data
  - build-web
  - release
  - demo
  - pre
  - pro

# ######################################################################################
# Data
# ######################################################################################
data build:
  image: python:3.8
  stage: build-data
  tags: ["build", "docker"]
  script:
    - cd $DATA_SRC_PATH
    - pip install -r ./scripts/requirements.txt
    - python ./scripts/build_data.py
    - mv _site $DATA_FOLDER_NAME
    - tar -cvzf $DATA_TAR_FILE $DATA_FOLDER_NAME
    #- mv $DATA_TAR_FILE ../..
  artifacts:
    paths:
      - $DATA_SRC_PATH/$DATA_TAR_FILE
    expire_in: 1 hour
  only:
    - EDATOS-3216

# ######################################################################################
# Web
# ######################################################################################
web build:
  stage: build-web
  tags: ["build", "docker"]
  script:
    - mv $DATA_SRC_PATH/$DATA_TAR_FILE $WEB_SRC_PATH
    - cd $WEB_SRC_PATH
    - tar -xf $DATA_TAR_FILE
    - ls
    - gem install bundler
    - bundle install
    - bundle exec jekyll build
    # Ahora creamos el artefacto que moveremos al server
    - mv $DATA_FOLDER_NAME _site  # Introducimos los datos en la carpeta de web
    - mv _site $WEB_FOLDER_NAME   # Cambiamos el nombre a la carpeta de web
    - tar -cvzf $WEB_TAR_FILE $WEB_FOLDER_NAME
    - mv $WEB_TAR_FILE ../..
  artifacts:
    paths:
      - $WEB_TAR_FILE
    expire_in: 1 hour
  only:
    - EDATOS-3216

# release:
#     stage: release
#     tags: ["build"]
#     script:
#       - git config --global user.email "sistemas@arte-consultores.com"
#       - git config --global user.name "arte"
#       - git checkout -B "$CI_BUILD_REF_NAME"
#       - if [[ -n "$RELEASE_VERSION" ]] ;
#         then
#           mvn -DreleaseVersion=$RELEASE_VERSION -Dresume=false release:prepare release:perform -Dusername=arte -Dpassword=$ARTEPASS -s /tmp/settings.xml ;
#         else
#           mvn -Dresume=false release:prepare release:perform -Dusername=arte -Dpassword=$ARTEPASS -s /tmp/settings.xml ;
#         fi
#     artifacts:
#       paths:
#       - target/*.jar
#     only:
#       - master
#     when: manual

######################################################################################
# DEMO
######################################################################################
demo deploy:
  stage: demo
  script:
    - bash ./etc/deploy/demo/deploy.sh
  only:
    - EDATOS-3216

# ######################################################################################
# PRE
# ######################################################################################
# .job_template: &pre_job_definition
#     image: anaga:5000/vpn_globalprotect:1.1.0
#     stage: pre
#     only:
#         - master
#     tags: ["deploy-vpn"]
#     when: manual
#     before_script:
#         - bash -c "echo '$PASSWORD' | openconnect -b --protocol=gp -c /mnt/$CERT evpn.gobiernodecanarias.org --user=$USER_VPN --key-password=$KEY_PW -i tun1 --no-proxy --disable-ipv6 --no-dtls --servercert pin-sha256:tzz6HX+uCVdZMTV1KbUZVNIMwqUSdJLh5P4r0WtFULY= --csd-wrapper=/root/hipreport.sh && sleep 5"

# pre check server status:
#     <<: *pre_job_definition
#     script:
#         - ssh -o "StrictHostKeyChecking=no" deploy@mgcartera.gobiernodecanarias.net echo 'ok'

# pre deploy:
#     <<: *pre_job_definition
#     script:
#         - bash ./etc/deploy/scripts/pre/deploy.sh
#     dependencies:
#         - release

# ######################################################################################
# PRO
# ######################################################################################
# .job_template: &pro_job_definition
#     image: anaga:5000/vpn_globalprotect:1.1.0
#     stage: pro
#     only:
#         - master
#     tags: ["deploy-vpn"]
#     when: manual
#     before_script:
#         - bash -c "echo '$PASSWORD' | openconnect -b --protocol=gp -c /mnt/$CERT evpn.gobiernodecanarias.org --user=$USER_VPN --key-password=$KEY_PW -i tun1 --no-proxy --disable-ipv6 --no-dtls --servercert pin-sha256:tzz6HX+uCVdZMTV1KbUZVNIMwqUSdJLh5P4r0WtFULY= --csd-wrapper=/root/hipreport.sh && sleep 5"

# pro check server status:
#     <<: *pro_job_definition
#     script:
#         - ssh -o "StrictHostKeyChecking=no" deploy@mgcrinaco.gobiernodecanarias.net echo 'ok'

# pro deploy:
#     <<: *pro_job_definition
#     script:
#         - bash ./etc/deploy/scripts/pro/deploy.sh
#     dependencies:
#         - release